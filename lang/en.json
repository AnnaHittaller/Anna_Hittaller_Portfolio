{
  "about-me": "About me",
  "my-skills": "My skills",
  "my-works": "My works",
  "contact-me": "Contact me",
  "resume-btn": "Resume",
  "download": "Download PDF",
  "hi": "Hi there, I'm",
  "frontend": "frontend ",
  "webdev": "web developer...",
  "about": "Once upon a time, an office worker googled “What is CSS?”, while trying to set up a website for her cat sitting side job.\nFast forward to today, a few years later, armed with a solid foundation in web development and a relentless drive to learn, I am ready to never look back and to forge a successful career out of my passion: coding. (I still like cats very much though.)",
  "about-2": "I believe that the perfect web application not only functions flawlessly but also leaves a lasting impression. Driven by my enthusiasm for both technology and design, I am eager to use my creativity, problem-solving mindset and dedication to craft immersive online experiences that delight users and exceed client expectations.",
  "about-3": "I am currently seeking opportunities and looking to join a team where I can further enhance my skills and grow professionally. If you believe that I could be a valuable addition to your team, I would love to hear from you!",
  "and-I": "...and I",
  "some": "Some of",
  "read-more": "Read more",
  "create": " create things with:",
  "things": " the things I've built:",
  "mymdb-summary": "Never lose track of your movie must-watch list again. With a user-friendly interface and a range of features, MyMDb offers a seamless way to manage your watchlist and stay updated with the latest trending movies.",
  "catspotter-summary": "A community web app to help lost cats get home.\nWith powerful visualization tools, infosheets, interactive maps and SVGs, data matching algorithm, adjustable location preferences and detailed filtering possibilities, this fullstack application has everything a user may need to be able to help finding lost cats quickly and to be the hero of the day.",
  "bird-summary": "The app every nature lover needs: it helps you to decide what to do, when finding a baby bird. Built in react, this easy-to-use questionnaire uses conditional rendering based on the user's answers.",
  "react-libraries": "React libraries",
  "cooking-summary": "A fullstack project to upload, share, and save recipes to the logged in user's own recipe book. Originally built with Contentful, but later modified to use my own RESTful API for user and recipe management.",
  "cooking-light-summary": "Log in, and upload, share, and save recipes to your own recipe book.",
  "jiu-jitsu-summary": "This website, developed for a local jiu-jitsu club, offers a clear site structure and responsive design.",
  "other": "Other",
  "noteworthy": " noteworthy ",
  "projects": "projects:",
  "usagi-summary": "Don’t have any ideas what to cook? Ask the bunny! An app to help me with randomized but filterable cooking ideas.",
  "mini-yelp": "Mini YELP-Like Server",
  "mini-yelp-summary": "An Express server providing several routes for the backend part of a collaborative fullstack project, for listing and adding new restaurants on a website.",
  "ip-summary": "A small, collaborative one-page app to show the user’s IP address, along with their location on a map and some extra infos about their country.",
  "check-out": "Visit my ",
  "github": "GitHub",
  "check-out-2": " page to view all other projects I’ve been working on",
  "get": "Get",
  "touch": " in touch:",
  "chat": "Let's have a chat or check out my",
  "profile": "profile if you would like to know more about me.",
  "linkedin": "LinkedIn",
  "built-with": "Built with ",
  "by": " by Anna Hittaller © 2023",
  "send": "Send",
  "project-details": "Project details",
  "features": "Key features:",
  "challenges" :"Challenges & solutions:",
  "tech": "Technologies used:",
  "back": "Back to the overview",
  "p1-1": "Imagine a world where no lost cat goes unnoticed. This is what Catspotter wants to achieve.",
  "p1-2": "Catspotter is an impressive full-stack community web application designed to facilitate the swift return of lost cats to their owners by leveraging the collective power of neighborhoods and communities. Built as the final project for the WBS Coding School web & app developer bootcamp, Catspotter empowers users to report cat sightings, register lost cats, receive match notifications, and visualize all the different data on an interactive map.",
  "f11-s": "Cat spotting and reporting:",
  "f11-u": "Leveraging the power of the community:",
  "f11-span": "Users can report cat sightings they encounter, contributing to a ollaborative effort to locate lost felines.",
  "f11-u1": "Helping visualization:",
  "f11-span1": "In addition to the image upload possibility, the customized placeholder SVGs serve as a quick and effective visualization tool when no photos of the cat are available.",
  "f11-u2": "Comprehensive infosheets:",
  "f11-span2": "Detailed infosheets are available for each reported cat, containing essential data such as descriptions (color, pattern, hair length, etc.), contact details, and photo.",
  "f12-s": "Lost cat registration:",
  "f12-u": "Connecting owners:",
  "f12-span": "Cat owners can share crucial information about their lost pets, including photos, descriptions, and last known locations, as well as their own contacts.",
  "f12-u1": "Amplifying outreach:",
  "f12-span1": "By notifying the community, the chances of a safe and timely reunion between lost cats and their owners increase.",
  "f13-s": "Intelligent match notifications:",
  "f13-u": "Advanced algorithm:",
  "f13-span": "Catspotter's smart matching algorithm let users know when their reported sightings align with the details of a lost cat, and vice versa. Color, pattern, lost and seen dates and vicinity are also taken into account.",
  "f14-s": "Interactive map visualization:",
  "f14-u": "Geographic insight:",
  "f14-span": "Powered by Leaflet, the dynamic map displays reported cat sightings and lost cat locations, offering a clear visual representation of activity, using different custom map markers to help differentiate between lost or seen cat data on the first glance.",
  "f14-u1": "Areas of interest:",
  "f14-span1": "Users can identify concentrated areas of cat-related activity, aiding focused search efforts.",
  "f14-u2": "Enhanced search:",
  "f14-span2": "The availability of comprehensive information and the available filtering options streamline search and identification processes.",
  "f15-s": "User-defined location preferences:",
  "f15-u": "Customized user areas:",
  "f15-span": "Users can tailor their location preferences and set desired area radii to receive relevant notifications based on proximity to reported sightings, providing a personalised experience throughout the app.",
  "future": "Future development:",
  "future-p": "Catspotter is an ongoing project (at the moment version 1.0) with plans for continuous development and feature enhancement. Upcoming changes include refining existing functionalities, optimizing and refactoring codebase, and introducing new features to further amplify the app's impact.",
  "challenges-p": "Creating CatSpotter presented a series of exciting challenges that pushed the boundaries of my development skills. Each obstacle was met with dedication and innovation, resulting in a visually appealing and functional application:",
  "ch1": "Matching algorithm precision:",
  "ch1-span": "Developing a matching algorithm that accurately identifies relevant cat sightings and lost cat reports. To be able to show relevant data matches only, I implemented a multi-step algorithm that considers various factors such as location, time, and description to refine accuracy.",
  "ch2": "User authentication and data security:",
  "ch2-span": "Ensuring the security of user data and preventing unauthorized access. I implemented user registration and login functionality with secure password hashing. Utilized JSON Web Tokens (JWT) for user authentication and authorization.",
  "ch3": "Location-based notifications:",
  "ch3-span": "Implementing location-based notifications for users within the vicinity of matching cat sightings. I designed a user-friendly interface that makes users able to adjust and customize their area and notification preferences, while integrating backend logic to deliver tailored updates.",
  "ch4": "Map visualization performance:",
  "ch4-span": "Optimizing the performance of the interactive map to handle a growing volume of reported cat activities. I utilized Leaflet's clustering and marker optimization techniques to enhance map responsiveness and maintain a smooth user experience, as well as integrating different Leaflet plugins to further enhance the possibilities for location searching.",
  "demo": "You can find the guest login credentials for checking out the demo app on GitHub!", 
  "p2-1": "MyMDb simplifies the process of managing your movie watchlist by providing an easy-to-use platform integrated with the TMDB API to discover, track, and explore a vast collection of movies. From discovering new releases to prioritizing what to watch next, MyMDb offers a comprehensive solution for movie enthusiasts.",
  "f21-s": "User Management:",
  "f21-u": "Authentication:",
  "f21-span": "Users can easily register and sign in to access personalized features. The user authentication process is done with Firebase Auth.",
  "f21-u1": "Storage of user data:",
  "f21-span1": "The users' personalized data, including theme colors and movie lists, are stored in Cloud Firestore.",
  "f21-u2": "Forgot password function:",
  "f21-span2": "Users can easily retrieve a new password in case they forgot their login credentials.",
  "f21-u3": "Customization possibilities:",
  "f21-span3": "Users can personalize their experience by selecting their preferred theme color, which will be reflected throughout the whole application.",
  "f22-s": "Movie Management:",
  "f22-u": "Creating a watchlist:",
  "f22-span": "Users can add movies to their watchlist to keep track of movies they intend to watch.",
  "f22-u1": "Watch Next Selection:",
  "f22-span1": "Allows users to prioritize movies by selecting them to watch next. These movies are displayed in a separate list to help keep planning the next movie night.",
    "f22-u2": "Individual movie pages:",
  "f22-span2": "Displays detailed information about the selected movie, including plot summary, cast, ratings, and more. Features a 'More Like This' list to spark interest in similar movies.",
  "f22-u3": "Movie search and discovery:",
  "f22-span3": "Utilizing the TMDB API, users can search for movies, discover new releases, and explore a comprehensive database of films. With the filtering possibilities for minimum rating and genres, they can retrieve even more relevant results.",
    "f22-u4": "'Trending Now' Carousel:",
  "f22-span4": "Users can stay updated with the latest trends through a dynamic carousel showcasing the week's trending movies right on top of the main page.",
  "ch21": "Data management across Firebase and Firestore:",
  "ch21-span": "Effectively handling user data and performing CRUD operations on movie lists required parallel actions to be executed in Firestore and Firebase. This involved implementing comprehensive data management strategies to ensure seamless synchronization between the frontend and backend.",
  "ch22": "Integration of Pinia for efficient API calls and data handling:",
  "ch22-span": "Integrating Pinia was essential for optimizing data handling and minimizing unnecessary API calls to Firebase and TMDB. By leveraging Pinia's state management, I could ensure efficient management of user movie lists, theme colors, and trending movies, enhancing the overall performance and responsiveness of the app.",
  "ch23": "API integration:",
  "ch23-span": "Implementing the search and discovery function posed challenges within the limitations of the TMDB API. Ensuring optimal results required careful management of API calls and queries, frontend and backend error handling, and minimizing retrieved data to essential fields.",
  "p3-1":"'Hey! I found a bird!' is a delightful and user-friendly web application, as well as an educational tool, built with React, designed to assist users to make informed decisions when they encounter a baby bird in need. The app provides step-by-step guidance on how to care for and assist the bird (or tells you if you don't have to intervene), along with engaging bird photos, helpful resources, and informative birding links.",
  "f31-s":"Conditionally rendered questionnaire:",
  "f31-u":"Interactive steps:",
  "f31-span":"Users are guided through a series of questions to identify the situation and condition of the baby bird.",
  "f31-u1":"Customized instructions:",
  "f31-span1":"Based on user responses, the app provides tailored instructions for appropriate actions.",
  "f32-s":"User-friendly interface:",
  "f32-u":"Visual appeal:",
  "f32-span":"Utilized a calming and inviting design aesthetic to ensure a positive user experience.",
  "f32-u1":"Responsive design:",
  "f32-span1":"Ensured that the app is accessible and visually appealing across a range of devices and screen sizes.",
  "f33-s":"Useful & cheerful extras:",
  "f33-u":"Randomized gallery:",
  "f33-span":"Integrated the Pexels API to display random bird photos, adding an element of delight to the user's experience and enhancing the app's atmosphere.",
  "f33-u1":"Birding links:",
  "f33-span1":"Compiled a curated selection of informative links related to birding, bird species identification, and bird rescue.",
  "ch31":"Design consistency:",
  "ch31-span":"I had to ensure a consistent and engaging design throughout the app on all types of devices. I created a design style guide and adhered to predefined design patterns for a cohesive look and feel.",
  "ch32":"Content curation:",
  "ch32-span":"I wanted to select relevant and useful birding links for the app's users. I conducted research to identify reputable sources and compiled a curated list of links that align with the app's purpose.",
  "ch33":"API integration & documentation reading:",
  "ch33-span":"The challenge was to incorporate a formerly unknown API seamlessly into the app. I studied the API documentation, implemented fetch requests, and integrated error handling to handle API responses.",
  "ch34":"Conditional rendering in React:",
  "ch34-span":"In the app, dynamically rendering components based on user inputs presented a challenge. The app required displaying different content and instructions depending on the user's responses to the questionnaire. Ensuring a smooth user experience and accurate guidance while handling various scenarios was crucial. This challenge challenge was addressed through the following steps:",
  "li1":"Utilized React's useState hook to manage the current question and user progress within the questionnaire.",
  "li2":"Created a structured questionData array containing questions, answer options, and associated navigation logic.",
  "li3":"Implemented a function to handle user answers and dynamically update the current question based on the selected answer's nextQuestion reference.",
  "li4":"Ensured that user responses trigger smooth transitions to the next relevant question, enabling users to progress naturally through the questionnaire, and to jump back any number of steps if they wanted."
}